Download Git di https://git-scm.com/
E-book Git dapat di download di https://git-scm.com/book/en/v2

Saat install aplikasi Git, terdapat beberapa pilihan "editor default untuk Git" yaitu:
- Vim (the ubiquitous text editor): untuk Linux/Unix dan advanced
- Nano: lebih sederhana dari Vim, dapat untuk pemula
- Notepad++: bisa untuk pemula, umum digunakan di Windows
- Visual Studio Code (VS Code): bisa untuk pemula, editor modern, biasa digunakan developer, Ada dua opsi yaitu VS Code (stabil) dan VS Code Insiders (versi beta/terbaru)
- Sublime Text: editor teks cepat dan ringan, populer juga di kalangan programmer
- Atom: editor dari GitHub (sekarang sudah tidak aktif dikembangkan, tapi masih ada yang pakai)

Recommend for beginner: VS Code & Notepad+++

Link untuk download VS Code: https://code.visualstudio.com
Link untuk download Notepad++: https://notepad-plus-plus.org


GIT COMMAND (LOCAL)
- $ git init = untuk menginisialisasi repo git di komputer, atau membuat folder di komputer lokal sebagai (MASTER) nya seperti yang ada di GitHub
- $ git add <file(s)> = buat nambahin file ke dalam staging area
- $ git status = untuk mengetahui status repo kita 
- $ git commit = 
- $ git config = 
- $ git branch = 
- $ git help = 
- $ git checkout = untuk mengubah pointer head atau pindah ke branch/master file

3 area pada repo Git:
- Working tree: area tempat bekerja (folder yang diisi file-file projectnya)
- Staging area: memberikan info ke Git bahwa ada perubahan yang dilakukan 
- History: setelah di commit, maka akan masuk ke dalam History

Staging area dan History akan masuk ke dalam folder yang bernama .git

Dari Working tree ke Staging area: gunakan $ git add (simpan perubahan ke stagging area)
Dari Staging area ke History: gunakan $ git commit (untuk menyimpan perubahan tersebut)

--------------------------------------------------

CARA BUAT REPO di GIT BASH:
$ pwd = print working directory, untuk menunjukan posisi working sedang dimana
$ ls = list folder yang ada di working directory
$ cd <nama folder> = change directory ke <nama folder> atau untuk mengubah working directory, dimana nama foldernya lebih bagus jika diberi '-' bukan spasi agar dapat terbaca

CARA SAVE NEW FILE di GIT BASH:
Setelah save di editor (dalam hal ini, VS Code), maka jangan lupa untuk masukkan file yang di save ke stagging area dengan cara $ git add
Setelah masuk ke stagging area, file tersebut di commit lagi dengan cara:
 $ git config --global user.name "YOUR NAME" 
 $ git config --global user.email "YOUR EMAIL" (email yang sama dengan yang dipakai di GitHub)
lalu enter
 $ git commit -m "YOUR MESSAGE" (untuk menambahkan pesan)
jika hanya $ git commit tanpa -m "" maka akan masuk ke dalam VS Code/Vim (tinggal klik silang di VS Code atau ketik q! untuk keluar tanpa save) 
lalu enter

atau
$ git add . = untuk add >1 fle untuk dipindahkan ke stagging area baik file yang di edit, ditambahkan, atau file yang di delete

atau bisa dijadikan 1 step untuk commit (syarat: VS Code sudah status M/modified atau sudah pernah di save dan git add)
$ git commit -a -m "PESAN"     atau
$ git commit -am "PESAN"

CARA TRACKING FILE yang sudah di commit (history):
$ git log = untuk semua file
$ git log -- <nama file> = untuk liat history commit apa saja pada 1 file yang diinginkan
$ git log -3 = untuk 3 commit terakhir yang dilakukan


CARA UNTUK MENGEMBALIKAN FILE yang sudah terhapus ke keadaan commit terakhir
$ git checkout <5 digit pertama dari commit hash nya> -- <nama file> = untuk nama file di akhir agar yang dikembalikan hanya file yang diinginkan saja
  (karena 5 digit pertama pada commit bisa saja commit yang dilakukan ada banyak, yaitu edit, nambah, delete file yang berbeda)

---------------------------------------------------

CARA MEMBUAT BRANCH
$ git branch <nama-branch>

untuk menampilkan branch yang ada bisa lakukan:
$ git log --all --decorate --online --graph 
dan bisa di sederhanakan menjadi nama lain yang diinginkan tanpa mengetik "--all --decorate --oneline --graph "
misal:
 $ alias graph="git log --all --decorate --online --graph"
dimana:
--oneline → menyingkat setiap commit jadi 1 baris.
--graph → menampilkan garis cabang (visualisasi branch).
--all → menampilkan semua branch, bukan hanya yang sedang aktif.

CARA PINDAH BRANCH 
untuk mengubah pointer head-nya atau berpindah ke branch lain:
$ git checkout <nama-branch>

dan ketika di check menggunakan $ git branch, ditandai dengan warna hijau di tulisan branch-nya yang artinya head-nya sudah berpindah
atau akan ada tulisan "HEAD -> <di cabang yang sudah dipindah>" saat ketik $ git log --all --decorate --online --graph 

----------------------------------------------------------

CARA MELAKUKAN MERGE
2 jenis merge:
- Fast Forward = terjadi ketika branch yang ingin digabungkan berada di jalur langsung (direct path)
- Three-way Merge = terdapat 2 branch dari satu asal yang sama yang ingin digabung. Jadi, antara file asal dan file yang sedang dikerjakan/branch baru di merge, akan digabungkan 

Cara merge:
Pindahkan dulu head pointernya ke file master (dalam hal ini file-nya akan merge master ke branch-nya) dengan $ git checkout master 
lalu
$ git merge <file>  /// $ git merge dosen --> merge dari file master ke dosen (contoh)

----------------------------------------------------------

CARA MENGHAPUS BRANCH YANG SUDAH DI MERGE ATAU HANYA INGIN MENGHAPUS SAJA
>> Untuk menghapus branch yang SUDAH di merge
Untuk mengetahui branch mana yang sudah di merge agar berhati-hati sebelum menghapus branch:
$ git branch --merged 

lalu jika sudah yakin untuk MENGHAPUS:
$ git branch -d <nama file yang mau dihapus>

>> Untuk menghapus file yang INGIN dihapus saja
$ git branch -D <nama file>

---------------------------------------------------------

CARA MELAKUKAN THREE-WAY MERGE
Pastikan pointer head-nya ada di master
lalu
 $ git merge <nama file yang mau di merge> 
akan terbuka editor di VS Code, bisa edit untuk commite message-nya atau memakai yang auto dari VS Code dan langsung save

jangan lupa hapus branch yang sudah di merge jika tidak diperlukan dengan $ git branch -d <nama file yang mau dihapus>
lalu cek dengan $ git branch
